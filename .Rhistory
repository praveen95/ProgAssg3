getwd()
setwd("Users/Praveen/Documents/CourseraGitHub/ProgAssg3")
setwd("Users/Praveen/Documents/CourseraGitHub/ProgAssg3")
getwd()
setwd("Users/Praveen/Documents")
setwd("~/Documents/CourseraGitHub/ProgAssg3")
getwd()
best <- function(state, outcome) {
## Reads outcome data
file_data <- read.csv("outcome-of-care-measures.csv", sep = ",")
## Checks that state and outcome are valid
valid_states <- c("AL", "AK", "AZ", "AR", "CA", "CO", "CT", "DE", "FL", "GA", "HI", "ID", "IL", "IN", "IA", "KS", "KY", "LA", "ME", "MD", "MA", "MI", "MN", "MS", "MO", "MT", "NE", "NV", "NH", "NJ", "NM", "NY", "NC", "ND", "OH", "OK", "OR", "PA", "RI", "SC", "SD", "TN", "TX", "UT", "VT", "VA", "WA", "WV", "WI", "WY")
valid_outcomes <- c("heart attack", "heart failure", "pneumonia")
if (!is.element(state, valid_states)) stop("invalid state")
if (!is.element(outcome, valid_outcomes)) stop("invalid outcome")
## Returns hospital name in that state with lowest 30-day death
data <- file_data[file_data$State == state,]
header_name <- NULL
if (outcome == "heart attack") {
header_name <- "Hospital.30.Day.Death..Mortality..Rates.from.Heart.Attack"
} else if (outcome == "heart failure") {
header_name <- "Hospital.30.Day.Death..Mortality..Rates.from.Heart.Failure"
} else {
header_name <- "Hospital.30.Day.Death..Mortality..Rates.from.Pneumonia"
}
mortality_rate <- data[,header_name]
mortality_rate <- mortality_rate[!mortality_rate == "Not Available"]
mortality_rate <- as.numeric(as.character(mortality_rate))
min_rate <- min(mortality_rate)
best_hosps <- data[data[,header_name] == min_rate,]
hosp_names <- sort(best_hosps[,"Hospital.Name"])
return(as.character(hosp_names[1]))
}
outcome <- read.csv("outcome-of-care-measures.csv", colClasses = "character")
head(outcome)
outcome[, 11] <- as.numeric(outcome[, 11])
hist(outcome[, 11])
source("best.R")
best("TX", "heart attack")
best <- function(state, outcome) {
## Reads outcome data
file_data <- read.csv("outcome-of-care-measures.csv", sep = ",")
## Checks that state and outcome are valid
valid_states <- c("AL", "AK", "AZ", "AR", "CA", "CO", "CT", "DE", "FL", "GA", "HI", "ID", "IL", "IN", "IA", "KS", "KY", "LA", "ME", "MD", "MA", "MI", "MN", "MS", "MO", "MT", "NE", "NV", "NH", "NJ", "NM", "NY", "NC", "ND", "OH", "OK", "OR", "PA", "RI", "SC", "SD", "TN", "TX", "UT", "VT", "VA", "WA", "WV", "WI", "WY")
valid_outcomes <- c("heart attack", "heart failure", "pneumonia")
if (!is.element(state, valid_states)) stop("invalid state")
if (!is.element(outcome, valid_outcomes)) stop("invalid outcome")
## Returns hospital name in that state with lowest 30-day death
data <- file_data[file_data$State == state,]
header_name <- NULL
if (outcome == "heart attack") {
header_name <- "Hospital.30.Day.Death..Mortality..Rates.from.Heart.Attack"
} else if (outcome == "heart failure") {
header_name <- "Hospital.30.Day.Death..Mortality..Rates.from.Heart.Failure"
} else {
header_name <- "Hospital.30.Day.Death..Mortality..Rates.from.Pneumonia"
}
mortality_rate <- data[,header_name]
mortality_rate <- mortality_rate[!mortality_rate == "Not Available"]
mortality_rate <- as.numeric(as.character(mortality_rate))
min_rate <- min(mortality_rate)
best_hosps <- data[data[,header_name] == min_rate,]
hosp_names <- sort(best_hosps[,"Hospital.Name"])
return(as.character(hosp_names[1]))
}
source("best.R")
best("TX", "heart attack")
best <- function(state, outcome) {
## Reads outcome data
file_data <- read.csv("outcome-of-care-measures.csv", sep = ",")
## Checks that state and outcome are valid
valid_states <- c("AL", "AK", "AZ", "AR", "CA", "CO", "CT", "DE", "FL", "GA", "HI", "ID", "IL", "IN", "IA", "KS", "KY", "LA", "ME", "MD", "MA", "MI", "MN", "MS", "MO", "MT", "NE", "NV", "NH", "NJ", "NM", "NY", "NC", "ND", "OH", "OK", "OR", "PA", "RI", "SC", "SD", "TN", "TX", "UT", "VT", "VA", "WA", "WV", "WI", "WY")
valid_outcomes <- c("heart attack", "heart failure", "pneumonia")
if (!is.element(state, valid_states)) stop("invalid state")
if (!is.element(outcome, valid_outcomes)) stop("invalid outcome")
## Returns hospital name in that state with lowest 30-day death
data <- file_data[file_data$State == state,]
header_name <- NULL
if (outcome == "heart attack") {
header_name <- "Hospital 30-Day Death (Mortality) Rates from Heart Attack"
} else if (outcome == "heart failure") {
header_name <- "Hospital.30.Day.Death..Mortality..Rates.from.Heart.Failure"
} else {
header_name <- "Hospital.30.Day.Death..Mortality..Rates.from.Pneumonia"
}
mortality_rate <- data[,header_name]
mortality_rate <- mortality_rate[!mortality_rate == "Not Available"]
mortality_rate <- as.numeric(as.character(mortality_rate))
min_rate <- min(mortality_rate)
best_hosps <- data[data[,header_name] == min_rate,]
hosp_names <- sort(best_hosps[,"Hospital.Name"])
return(as.character(hosp_names[1]))
}
source("best.R")
best("TX", "heart attack")
best("TX", "heart attack")
best <- function(state, outcome) {
## Reads outcome data
file_data <- read.csv("outcome-of-care-measures.csv", sep = ",")
## Checks that state and outcome are valid
valid_states <- c("AL", "AK", "AZ", "AR", "CA", "CO", "CT", "DE", "FL", "GA", "HI", "ID", "IL", "IN", "IA", "KS", "KY", "LA", "ME", "MD", "MA", "MI", "MN", "MS", "MO", "MT", "NE", "NV", "NH", "NJ", "NM", "NY", "NC", "ND", "OH", "OK", "OR", "PA", "RI", "SC", "SD", "TN", "TX", "UT", "VT", "VA", "WA", "WV", "WI", "WY")
valid_outcomes <- c("heart attack", "heart failure", "pneumonia")
if (!is.element(state, valid_states)) stop("invalid state")
if (!is.element(outcome, valid_outcomes)) stop("invalid outcome")
## Returns hospital name in that state with lowest 30-day death
data <- file_data[file_data$State == state,]
header_name <- NULL
if (outcome == "heart attack") {
header_name <- "Hospital.30-Day.Death..Mortality.Rates.from.Heart.Attack"
} else if (outcome == "heart failure") {
header_name <- "Hospital.30.Day.Death..Mortality..Rates.from.Heart.Failure"
} else {
header_name <- "Hospital.30.Day.Death..Mortality..Rates.from.Pneumonia"
}
mortality_rate <- data[,header_name]
mortality_rate <- mortality_rate[!mortality_rate == "Not Available"]
mortality_rate <- as.numeric(as.character(mortality_rate))
min_rate <- min(mortality_rate)
best_hosps <- data[data[,header_name] == min_rate,]
hosp_names <- sort(best_hosps[,"Hospital.Name"])
return(as.character(hosp_names[1]))
}
source("best.R")
best("TX", "heart attack")
best <- function(state, outcome) {
## Reads outcome data
file_data <- read.csv("outcome-of-care-measures.csv", sep = ",")
## Checks that state and outcome are valid
valid_states <- c("AL", "AK", "AZ", "AR", "CA", "CO", "CT", "DE", "FL", "GA", "HI", "ID", "IL", "IN", "IA", "KS", "KY", "LA", "ME", "MD", "MA", "MI", "MN", "MS", "MO", "MT", "NE", "NV", "NH", "NJ", "NM", "NY", "NC", "ND", "OH", "OK", "OR", "PA", "RI", "SC", "SD", "TN", "TX", "UT", "VT", "VA", "WA", "WV", "WI", "WY")
valid_outcomes <- c("heart attack", "heart failure", "pneumonia")
if (!is.element(state, valid_states)) stop("invalid state")
if (!is.element(outcome, valid_outcomes)) stop("invalid outcome")
## Returns hospital name in that state with lowest 30-day death
data <- file_data[file_data$State == state,]
header_name <- NULL
if (outcome == "heart attack") {
header_name <- "Hospital.30.Day.Death..Mortality.Rates.from.Heart.Attack"
} else if (outcome == "heart failure") {
header_name <- "Hospital.30.Day.Death..Mortality..Rates.from.Heart.Failure"
} else {
header_name <- "Hospital.30.Day.Death..Mortality..Rates.from.Pneumonia"
}
mortality_rate <- data[,header_name]
mortality_rate <- mortality_rate[!mortality_rate == "Not Available"]
mortality_rate <- as.numeric(as.character(mortality_rate))
min_rate <- min(mortality_rate)
best_hosps <- data[data[,header_name] == min_rate,]
hosp_names <- sort(best_hosps[,"Hospital.Name"])
return(as.character(hosp_names[1]))
}
source("best.R")
best("TX", "heart attack")
best <- function(state, outcome) {
## Reads outcome data
file_data <- read.csv("outcome-of-care-measures.csv", sep = ",")
## Checks that state and outcome are valid
valid_states <- c("AL", "AK", "AZ", "AR", "CA", "CO", "CT", "DE", "FL", "GA", "HI", "ID", "IL", "IN", "IA", "KS", "KY", "LA", "ME", "MD", "MA", "MI", "MN", "MS", "MO", "MT", "NE", "NV", "NH", "NJ", "NM", "NY", "NC", "ND", "OH", "OK", "OR", "PA", "RI", "SC", "SD", "TN", "TX", "UT", "VT", "VA", "WA", "WV", "WI", "WY")
valid_outcomes <- c("heart attack", "heart failure", "pneumonia")
if (!is.element(state, valid_states)) stop("invalid state")
if (!is.element(outcome, valid_outcomes)) stop("invalid outcome")
## Returns hospital name in that state with lowest 30-day death
data <- file_data[file_data$State == state,]
header_name <- NULL
if (outcome == "heart attack") {
header_name <- "Hospital.30.Day.Death..Mortality..Rates.from.Heart.Attack"
} else if (outcome == "heart failure") {
header_name <- "Hospital.30.Day.Death..Mortality..Rates.from.Heart.Failure"
} else {
header_name <- "Hospital.30.Day.Death..Mortality..Rates.from.Pneumonia"
}
mortality_rate <- data[,header_name]
mortality_rate <- mortality_rate[!mortality_rate == "Not Available"]
mortality_rate <- as.numeric(as.character(mortality_rate))
min_rate <- min(mortality_rate)
best_hosps <- data[data[,header_name] == min_rate,]
hosp_names <- sort(best_hosps[,"Hospital.Name"])
return(as.character(hosp_names[1]))
}
source("best.R")
best("TX", "heart attack")
best <- function(state, outcome) {
## Validate the outcome string
outcomes = c("heart attack", "heart failure", "pneumonia")
if( outcome %in% outcomes == FALSE ) stop("invalid outcome")
## Read outcome data
data <- read.csv("outcome-of-care-measures.csv", colClasses = "character")
## Filter and simplify the column names
data <- data[c(2, 7, 11, 17, 23)]
names(data)[1] <- "name"
names(data)[2] <- "state"
names(data)[3] <- "heart attack"
names(data)[4] <- "heart failure"
names(data)[5] <- "pneumonia"
## Validate the state string
states <- data[, 2]
states <- unique(states)
if( state %in% states == FALSE ) stop("invalid state")
## Grab only rows with our state value
data <- data[data$state==state & data[outcome] != 'Not Available', ]
vals <- data[, outcome]
rowNum <- which.min(vals)
## Return hospital name in that state with lowest 30-day death rate
data[rowNum, ]$name
}
source("best.R")
best("TX", "heart attack")
best("TX", "heart failure")
best("MD", "heart attack")
best("MD", "pneumonia")
best("BB", "heart attack")
best("NY", "hart attack")
rankhospital <- function(state, outcome, num) {
## Read outcome data
data <- read.csv("outcome-of-care-measures.csv", colClasses = "character")
data <- data[c(2, 7, 11, 17, 23)]
names(data)[1] <- "name"
names(data)[2] <- "state"
names(data)[3] <- "heart attack"
names(data)[4] <- "heart failure"
names(data)[5] <- "pneumonia"
## Validate the outcome string
outcomes = c("heart attack", "heart failure", "pneumonia")
if( outcome %in% outcomes == FALSE ) stop("invalid outcome")
## Validate the state string
states <- data[, 2]
states <- unique(states)
if( state %in% states == FALSE ) stop("invalid state")
## Validate the num value
if( num != "best" && num != "worst" && num%%1 != 0 ) stop("invalid num")
## Grab only rows with our state value
data <- data[data$state==state & data[outcome] != 'Not Available', ]
## Order the data
data[outcome] <- as.data.frame(sapply(data[outcome], as.numeric))
data <- data[order(data$name, decreasing = FALSE), ]
data <- data[order(data[outcome], decreasing = FALSE), ]
## Process the num argument
vals <- data[, outcome]
if( num == "best" ) {
rowNum <- which.min(vals)
} else if( num == "worst" ) {
rowNum <- which.max(vals)
} else {
rowNum <- num
}
## Return hospital name in that state with lowest 30-day death rate
data[rowNum, ]$name
}
source("rankhospital.R")
rankhospital("MD", "heart failure", 5)
head(texas)
rankhospital("MD", "heart attack", "worst")
rankhospital("MN", "heart attack", 5000)
rankhospital("MD", "heart attack", "best")
rankall <- function(outcome, num = "best") {
## Read outcome data
data <- read.csv("outcome-of-care-measures.csv", colClasses = "character")
data <- data[c(2, 7, 11, 17, 23)]
names(data)[1] <- "name"
names(data)[2] <- "state"
names(data)[3] <- "heart attack"
names(data)[4] <- "heart failure"
names(data)[5] <- "pneumonia"
## Validate the outcome string
outcomes = c("heart attack", "heart failure", "pneumonia")
if( outcome %in% outcomes == FALSE ) stop("invalid outcome")
## Validate the num value
if( num != "best" && num != "worst" && num%%1 != 0 ) stop("invalid num")
## Grab only rows with data in our outcome
data <- data[data[outcome] != 'Not Available', ]
## Order the data
data[outcome] <- as.data.frame(sapply(data[outcome], as.numeric))
data <- data[order(data$name, decreasing = FALSE), ]
data <- data[order(data[outcome], decreasing = FALSE), ]
## Helper functiont to process the num argument
getHospByRank <- function(df, s, n) {
df <- df[df$state==s, ]
vals <- df[, outcome]
if( n == "best" ) {
rowNum <- which.min(vals)
} else if( n == "worst" ) {
rowNum <- which.max(vals)
} else {
rowNum <- n
}
df[rowNum, ]$name
}
## For each state, find the hospital of the given rank
states <- data[, 2]
states <- unique(states)
newdata <- data.frame("hospital"=character(), "state"=character())
for(st in states) {
hosp <- getHospByRank(data, st, num)
newdata <- rbind(newdata, data.frame(hospital=hosp, state=st))
}
## Return a data frame with the hospital names and the (abbreviated) state name
newdata <- newdata[order(newdata['state'], decreasing = FALSE), ]
newdata
}
source("rankall.R")
head(rankall("heart attack", 20), 10)
tail(rankall("pneumonia", "worst"), 3)
tail(rankall("heart failure"), 10)
tail(rankall("heart failure"), 10)
source("http://d396qusza40orc.cloudfront.net/rprog%2Fscripts%2Fsubmitscript3.R")
source("submitscript3.R")
source("http://d396qusza40orc.cloudfront.net/rprog%2Fscripts%2Fsubmitscript3.R")
submit()
2
submit()
submit()
submit()
submit()
submit()
submit()
submit()
submit()
submit()
r.version.string
R.version.string
install.packages("swirl")
library(swirl)
swirl()
5+7
X <- 5+7
x
x <- 5+7
x
y <- x - 3
y
z <- c(1.1, 9, 3.14)
c
?c
z
z, 555
c(z, 555)
c(z,555,z)
z*2 + 100
my_sqrt <- sqrt(z-1)
my_sqrt
my_div <- z/my_sqrt
my_div
c(1,2,3,4) + c(0,10)
c(1,2,3,4) + c(0,10,100)
z*2 + 1000
my_div
getwd()
ls()
x <- 9
ls()
list.files()
?list.files
args()
args(list.files)
old.dir <- getwd()
dir.create("testdir")
setwd("testdir")
file.create("mytest.R")
list.file()
list.files()
file.exists("mytest.R")
file.info("mytest.R")
file.rename("mytest.R"$"mytest3.R")
file.rename("mytest.R")
file.rename("mytest.R", "mytest2.R")
file.copy("mytest2.R", "mytest3.R")
file.path("mytest3.R")
file.path('folder1', 'fodler2')
file.path("folder1", "fodler2")
file.path("folder1", "folder2")
?dire.create
?dir.create
dir.create(testdir2)
dir.create("testdir2")
dir.create(file.path('testdir2','testdir3'), recursive = TRUE)
unlink("testdir2", recursive = TRUE)
setwd("Users/Praveen/Documents/CourseraGitHub/")
setwd("Users/Praveen/Documents/CourseraGitHub")
setwd("~/Documents/CourseraGitHub")
setwd("old.dir")
setwd(old.dir)
unlink("testdir", recursive = TRUE)
1:20
pi:10
15:1
?:
?`:`
seq(1,20)
seq(0,10, by=0.5)
seq(5,10,length=30)
my_seq <- seq(5,10,length=30)
length(my_seq)
1:length(my_seq)
seq(along.with = my_seq)
seq_along(my_seq)
rep(0. times = 40)
rep(0, times = 40)
rep(c(0,1,2), times=10)
rep(c(0,1,2), each=10)
num_vect <- c(0.5, 55, -10, 6)
tf <- num_vect < 1
tf
num_vect >= 6
my_char <= c("My", "name","is")
my_char <= char("My", "name","is")
my_char <- c("My", "name","is")
my_char
paste(my_char, collapse = "")
paste(my_char, collapse = " ")
ny_name <- c(my_char, "Praveen")
ny_name <- c(my_char, "Swirl")
my_name <- c(my_char, "Praveen")
my_name
paste(my_name, collapse = " ")
paste("Hello","world!", sep = " ")
paste(c(1,2,3), c("X", "Y", "Z"), sep = "")
paste(1:3, c("X", "Y", "Z"), sep = "")
paste(LETTERS, 1:4, sep = "-")
x <- c(44, NA, 5, NA)
x*3
y <- rnorm(1000)
z <- rep(NA, 1000)
my_data <- sample(c(y,z), 100)
my_na <- is.na(my_data)
my_na
my_data == NA
sum(my_na)
my_data
0/0
Inf - Inf
